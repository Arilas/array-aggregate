// flow-typed signature: 277d56cb7824f76a016e5b5f52a8214e
// flow-typed version: <<STUB>>/monk_v^6.0.6/flow_v0.84.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'monk'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'monk' {

  declare export type CollectionOptions = {
    capped?: boolean,
    autoIndexId?: boolean,
    size?: number,
    max?: number,
    storageEngine?: Object,
    validator?: Object,
    validationLevel?: 'off' | 'strict' | 'moderate',
    validationAction?: 'error' | 'warn',
    indexOptionDefaults?: Object,
    viewOn?: string,
    pipeline?: Array<any>,
    collation?: {
      locale?: string,
      caseLevel?: boolean,
      caseFirst?: string,
      strength?: number,
      numericOrdering?: boolean,
      alternate?: string,
      maxVariable?: string,
      backwards?: boolean
    },
    writeConcern?: Object
  }

  declare type AggregationStages = '$match' | '$project' | '$sort' | '$unwind' | '$skip' | '$limit' | '$lookup' | '$group'

  declare export type AggregationPipeline = Array<{
    [ key: AggregationStages ]: any
  }>

  declare export type Document = {
    _id: any
  }

  declare export type BulkOperations = {
    insertOne: { document: Document },
  } | {
    updateOne: { filter: Object, update: Object, upsert?: bool }
  } | {
    updateMany: { filter: Object, update: Object, upsert?: bool }
  } | {
    deleteOne: { filter: Object }
  } | {
    deleteMany: { filter: Object }
  } | {
    replaceOne: { filter: Object, replacement: Object, upsert?: bool}
  }


  declare export type Collection<T: Document> = {
    aggregate(stages: AggregationPipeline, options?: Object): Promise<Array<Document>>,
    bulkWrite(operations: Array<BulkOperations>, options?: Object): Promise<any>,
    count(query: any): Promise<number>,
    drop(): Promise<void>,
  }

  declare class MongoDB$ObjectID {
    /**
    * Create a new ObjectID instance
    * @param {(string|number|MongoDB$ObjectID)} id Can be a 24 byte hex string, 12 byte binary string or a Number.
    */
    constructor(id?: string | number | MongoDB$ObjectID): this;

    /** The generation time of this ObjectID instance */
    generationTime: number;

    /**
    * Creates an ObjectID from a hex string representation of an ObjectID.
    * @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.
    * @return {ObjectID} return the created ObjectID
    */
    static createFromHexString(hexString: string): MongoDB$ObjectID;

    /**
    * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.
    * @param {number} time an integer number representing a number of seconds.
    * @return {ObjectID} return the created ObjectID
    */
    static createFromTime(time: number): MongoDB$ObjectID;

    /**
    * Checks if a value is a valid bson ObjectID
    *
    * @return {boolean} return true if the value is a valid bson ObjectID, return false otherwise.
    */
    static isValid(id: string | number | MongoDB$ObjectID): boolean;

    /**
    * Compares the equality of this ObjectID with `otherID`.
    * @param {object} otherID ObjectID instance to compare against.
    * @return {boolean} the result of comparing two ObjectID's
    */
    equals(otherID: MongoDB$ObjectID): boolean;

    /**
    * Generate a 12 byte id string used in ObjectID's
    * @param {number} time optional parameter allowing to pass in a second based timestamp.
    * @return {string} return the 12 byte id binary string.
    */
    generate(time?: number): string;

    /**
    * Returns the generation date (accurate up to the second) that this ID was generated.
    * @return {date} the generation date
    */
    getTimestamp(): Date;

    /**
    * Return the ObjectID id as a 24 byte hex string representation
    * @return {string} return the 24 byte hex string representation.
    */
    toHexString(): string;
  }

  declare export type Manager = {
    close(force?: bool): Promise<void>,
    create(name: string, creationOptions?: CollectionOptions, options?: Object): Collection<*>,
    get(name: string, options?: Object): Collection<*>,
    addMiddleware(middleware: Function): void,
    id(str?: string): MongoDB$ObjectID
  }
  declare export default (url: string) => Manager
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'monk/lib/applyMiddlewares' {
  declare module.exports: any;
}

declare module 'monk/lib/collection' {
  declare module.exports: any;
}

declare module 'monk/lib/compose' {
  declare module.exports: any;
}

declare module 'monk/lib/helpers' {
  declare module.exports: any;
}

declare module 'monk/lib/manager' {
  declare module.exports: any;
}

declare module 'monk/lib/monk' {
  declare module.exports: any;
}

// Filename aliases
declare module 'monk/lib/applyMiddlewares.js' {
  declare module.exports: $Exports<'monk/lib/applyMiddlewares'>;
}
declare module 'monk/lib/collection.js' {
  declare module.exports: $Exports<'monk/lib/collection'>;
}
declare module 'monk/lib/compose.js' {
  declare module.exports: $Exports<'monk/lib/compose'>;
}
declare module 'monk/lib/helpers.js' {
  declare module.exports: $Exports<'monk/lib/helpers'>;
}
declare module 'monk/lib/manager.js' {
  declare module.exports: $Exports<'monk/lib/manager'>;
}
declare module 'monk/lib/monk.js' {
  declare module.exports: $Exports<'monk/lib/monk'>;
}
